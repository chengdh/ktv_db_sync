#!/usr/bin/env python
import datetime
import xmlrpclib
import csv

username = "admin"
pwd = "1"
dbname = "test_sync"
server = "http://erp.nt999.net:8069"

sock_common = xmlrpclib.ServerProxy("%s/xmlrpc/common"%server)

uid = sock_common.login(dbname, username, pwd)

sock = xmlrpclib.ServerProxy("%s/xmlrpc/object"%server)

def do_import(osv_name,import_file):
  imp_fields = []
  f = open("export/%s"%import_file, 'rb')
  reader = csv.reader(f, delimiter=',', quoting=csv.QUOTE_NONE)
  imp_fields =  reader.next()
  f.close()

  handler = open("export/%s"%import_file, 'rb')
  binary_data = xmlrpclib.Binary(handler.read())
  handler.close()

  imp_options = {
    'headers'   : True,
    'encoding'  : 'utf-8',
    'quoting'   : "'",
    'separator'  : ","
    }
  imp_data = {
    'res_model' : osv_name,
    'file'      : binary_data,
    'file_name' : import_file,
    'file_type' : 'csv'

  }
  print "importing: %s" % import_file
  print imp_fields
  import_id = sock.execute(dbname, uid, pwd, 'base_import.import', 'create', imp_data)

  ret = sock.execute(dbname, uid, pwd, 'base_import.import', 'do', import_id,imp_fields,imp_options)

today_str = datetime.date.today().strftime("%Y-%m-%d")
imp_arrays = [['product.uom',"product_uom_%s.csv"%today_str],
    ['product.category',"product_category_%s.csv"%today_str],
    ['product.product',"product_product_%s.csv"%today_str],
    ['stock.inventory',"stock_inventory_%s.csv"%today_str],
    ['stock.inventory.line',"stock_inventory_line_%s.csv"%today_str],]

#imp_arrays = [['ir.model.access','ir.model.access.csv']]
for imp_data in imp_arrays:
  do_import(imp_data[0],imp_data[1])

external_inventory_id = "ktv_stock_inventory_" + datetime.date.today().strftime("%y%m%d")
inventory_id = sock.execute(dbname, uid, pwd, 'ir.model.data', 'search', [('name','=',external_inventory_id)])
print "inventory_id: %s" % inventory_id
#start workflow
#action_confirm
res = sock.exec_workflow(dbname, uid, pwd, "stock.inventory", "button_confirm", inventory_id)
#sock.execute(dbname, uid, pwd, 'stock.inventory', 'action_confirm', inventory_id)
#action_done
#sock.execute(dbname, uid, pwd, 'stock.inventory', 'action_done', inventory_id)
